// source: score.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var candles_pb = require('./candles_pb.js');
goog.object.extend(proto, candles_pb);
var validate_validate_pb = require('./validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
goog.exportSymbol('proto.pb.Score', null, global);
goog.exportSymbol('proto.pb.ScoreRequest', null, global);
goog.exportSymbol('proto.pb.ScoreResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ScoreRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ScoreRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ScoreRequest.displayName = 'proto.pb.ScoreRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ScoreResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ScoreResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ScoreResponse.displayName = 'proto.pb.ScoreResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Score = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Score, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Score.displayName = 'proto.pb.Score';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ScoreRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ScoreRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ScoreRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ScoreRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    stage: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isLong: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    entryPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    quantity: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    profitPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    lossPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    leverage: jspb.Message.getFieldWithDefault(msg, 11, 0),
    balance: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    identifier: jspb.Message.getFieldWithDefault(msg, 13, ""),
    scoreId: jspb.Message.getFieldWithDefault(msg, 14, ""),
    waitingTerm: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ScoreRequest}
 */
proto.pb.ScoreRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ScoreRequest;
  return proto.pb.ScoreRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ScoreRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ScoreRequest}
 */
proto.pb.ScoreRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStage(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsLong(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEntryPrice(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQuantity(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProfitPrice(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLossPrice(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLeverage(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBalance(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setScoreId(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWaitingTerm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ScoreRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ScoreRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ScoreRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ScoreRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStage();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getIsLong();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getEntryPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getProfitPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getLossPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getLeverage();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getBalance();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getScoreId();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getWaitingTerm();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
};


/**
 * optional string mode = 1;
 * @return {string}
 */
proto.pb.ScoreRequest.prototype.getMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.ScoreRequest} returns this
 */
proto.pb.ScoreRequest.prototype.setMode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.pb.ScoreRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.ScoreRequest} returns this
 */
proto.pb.ScoreRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.pb.ScoreRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.ScoreRequest} returns this
 */
proto.pb.ScoreRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 stage = 4;
 * @return {number}
 */
proto.pb.ScoreRequest.prototype.getStage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ScoreRequest} returns this
 */
proto.pb.ScoreRequest.prototype.setStage = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool is_long = 5;
 * @return {boolean}
 */
proto.pb.ScoreRequest.prototype.getIsLong = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.ScoreRequest} returns this
 */
proto.pb.ScoreRequest.prototype.setIsLong = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional double entry_price = 6;
 * @return {number}
 */
proto.pb.ScoreRequest.prototype.getEntryPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ScoreRequest} returns this
 */
proto.pb.ScoreRequest.prototype.setEntryPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double quantity = 7;
 * @return {number}
 */
proto.pb.ScoreRequest.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ScoreRequest} returns this
 */
proto.pb.ScoreRequest.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double profit_price = 9;
 * @return {number}
 */
proto.pb.ScoreRequest.prototype.getProfitPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ScoreRequest} returns this
 */
proto.pb.ScoreRequest.prototype.setProfitPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double loss_price = 10;
 * @return {number}
 */
proto.pb.ScoreRequest.prototype.getLossPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ScoreRequest} returns this
 */
proto.pb.ScoreRequest.prototype.setLossPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional int32 leverage = 11;
 * @return {number}
 */
proto.pb.ScoreRequest.prototype.getLeverage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ScoreRequest} returns this
 */
proto.pb.ScoreRequest.prototype.setLeverage = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional double balance = 12;
 * @return {number}
 */
proto.pb.ScoreRequest.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ScoreRequest} returns this
 */
proto.pb.ScoreRequest.prototype.setBalance = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional string identifier = 13;
 * @return {string}
 */
proto.pb.ScoreRequest.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.ScoreRequest} returns this
 */
proto.pb.ScoreRequest.prototype.setIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string score_id = 14;
 * @return {string}
 */
proto.pb.ScoreRequest.prototype.getScoreId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.ScoreRequest} returns this
 */
proto.pb.ScoreRequest.prototype.setScoreId = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional int32 waiting_term = 15;
 * @return {number}
 */
proto.pb.ScoreRequest.prototype.getWaitingTerm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ScoreRequest} returns this
 */
proto.pb.ScoreRequest.prototype.setWaitingTerm = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ScoreResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ScoreResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ScoreResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ScoreResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    originChart: (f = msg.getOriginChart()) && candles_pb.CandleData.toObject(includeInstance, f),
    resultChart: (f = msg.getResultChart()) && candles_pb.CandleData.toObject(includeInstance, f),
    score: (f = msg.getScore()) && proto.pb.Score.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ScoreResponse}
 */
proto.pb.ScoreResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ScoreResponse;
  return proto.pb.ScoreResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ScoreResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ScoreResponse}
 */
proto.pb.ScoreResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new candles_pb.CandleData;
      reader.readMessage(value,candles_pb.CandleData.deserializeBinaryFromReader);
      msg.setOriginChart(value);
      break;
    case 2:
      var value = new candles_pb.CandleData;
      reader.readMessage(value,candles_pb.CandleData.deserializeBinaryFromReader);
      msg.setResultChart(value);
      break;
    case 3:
      var value = new proto.pb.Score;
      reader.readMessage(value,proto.pb.Score.deserializeBinaryFromReader);
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ScoreResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ScoreResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ScoreResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ScoreResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOriginChart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      candles_pb.CandleData.serializeBinaryToWriter
    );
  }
  f = message.getResultChart();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      candles_pb.CandleData.serializeBinaryToWriter
    );
  }
  f = message.getScore();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.Score.serializeBinaryToWriter
    );
  }
};


/**
 * optional CandleData origin_chart = 1;
 * @return {?proto.pb.CandleData}
 */
proto.pb.ScoreResponse.prototype.getOriginChart = function() {
  return /** @type{?proto.pb.CandleData} */ (
    jspb.Message.getWrapperField(this, candles_pb.CandleData, 1));
};


/**
 * @param {?proto.pb.CandleData|undefined} value
 * @return {!proto.pb.ScoreResponse} returns this
*/
proto.pb.ScoreResponse.prototype.setOriginChart = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.ScoreResponse} returns this
 */
proto.pb.ScoreResponse.prototype.clearOriginChart = function() {
  return this.setOriginChart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ScoreResponse.prototype.hasOriginChart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CandleData result_chart = 2;
 * @return {?proto.pb.CandleData}
 */
proto.pb.ScoreResponse.prototype.getResultChart = function() {
  return /** @type{?proto.pb.CandleData} */ (
    jspb.Message.getWrapperField(this, candles_pb.CandleData, 2));
};


/**
 * @param {?proto.pb.CandleData|undefined} value
 * @return {!proto.pb.ScoreResponse} returns this
*/
proto.pb.ScoreResponse.prototype.setResultChart = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.ScoreResponse} returns this
 */
proto.pb.ScoreResponse.prototype.clearResultChart = function() {
  return this.setResultChart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ScoreResponse.prototype.hasResultChart = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Score score = 3;
 * @return {?proto.pb.Score}
 */
proto.pb.ScoreResponse.prototype.getScore = function() {
  return /** @type{?proto.pb.Score} */ (
    jspb.Message.getWrapperField(this, proto.pb.Score, 3));
};


/**
 * @param {?proto.pb.Score|undefined} value
 * @return {!proto.pb.ScoreResponse} returns this
*/
proto.pb.ScoreResponse.prototype.setScore = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.ScoreResponse} returns this
 */
proto.pb.ScoreResponse.prototype.clearScore = function() {
  return this.setScore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ScoreResponse.prototype.hasScore = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Score.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Score.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Score} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Score.toObject = function(includeInstance, msg) {
  var f, obj = {
    stage: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    entrytime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    leverage: jspb.Message.getFieldWithDefault(msg, 4, 0),
    entryPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    endPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    outTime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    roe: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    pnl: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    commission: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    isLiquidated: jspb.Message.getBooleanFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Score}
 */
proto.pb.Score.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Score;
  return proto.pb.Score.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Score} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Score}
 */
proto.pb.Score.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntrytime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLeverage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEntryPrice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndPrice(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutTime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRoe(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPnl(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCommission(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsLiquidated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Score.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Score.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Score} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Score.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEntrytime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLeverage();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getEntryPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getEndPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getOutTime();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getRoe();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getPnl();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getCommission();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getIsLiquidated();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional int32 stage = 1;
 * @return {number}
 */
proto.pb.Score.prototype.getStage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Score} returns this
 */
proto.pb.Score.prototype.setStage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.pb.Score.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Score} returns this
 */
proto.pb.Score.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string entrytime = 3;
 * @return {string}
 */
proto.pb.Score.prototype.getEntrytime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Score} returns this
 */
proto.pb.Score.prototype.setEntrytime = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 leverage = 4;
 * @return {number}
 */
proto.pb.Score.prototype.getLeverage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Score} returns this
 */
proto.pb.Score.prototype.setLeverage = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double entry_price = 5;
 * @return {number}
 */
proto.pb.Score.prototype.getEntryPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Score} returns this
 */
proto.pb.Score.prototype.setEntryPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double end_price = 6;
 * @return {number}
 */
proto.pb.Score.prototype.getEndPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Score} returns this
 */
proto.pb.Score.prototype.setEndPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional int32 out_time = 7;
 * @return {number}
 */
proto.pb.Score.prototype.getOutTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Score} returns this
 */
proto.pb.Score.prototype.setOutTime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional double roe = 8;
 * @return {number}
 */
proto.pb.Score.prototype.getRoe = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Score} returns this
 */
proto.pb.Score.prototype.setRoe = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double pnl = 9;
 * @return {number}
 */
proto.pb.Score.prototype.getPnl = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Score} returns this
 */
proto.pb.Score.prototype.setPnl = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double commission = 10;
 * @return {number}
 */
proto.pb.Score.prototype.getCommission = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Score} returns this
 */
proto.pb.Score.prototype.setCommission = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional bool is_liquidated = 11;
 * @return {boolean}
 */
proto.pb.Score.prototype.getIsLiquidated = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.Score} returns this
 */
proto.pb.Score.prototype.setIsLiquidated = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


goog.object.extend(exports, proto.pb);
